"
" A (not so) minimal vimrc.
"

" You want Vim, not vi. When Vim finds a vimrc, 'nocomptaible' is set anyway.
" We set it explicitely to make our position clear!
set nocompatible
scriptencoding utf-8
filetype plugin indent on  " Load plugins according to detected filetype.
syntax on                  " Enable syntax highlighting.

set autoindent             " Indent according to previous line.
set expandtab              " Use spaces instead of tabs.
set softtabstop =4         " Tab key indents by 4 spaces.
set shiftwidth  =4         " >> indents by 4 spaces.
set shiftround             " >> indents to next multiple of 'shiftwidth'.

set backspace   =indent,eol,start  " Make backspace work as you would expect.
set hidden                 " Switch between buffers without having to save first.
set laststatus  =2         " Always show statusline.
set display     =lastline  " Show as much as possible of the last line.

set showmode               " Show current mode in command-line.
set showcmd                " Show already typed keys when more are expected.

set incsearch              " Highlight while searching with / or ?.
set hlsearch               " Keep matches highlighted.

set ttyfast                " Faster redrawing.
set lazyredraw             " Only redraw when necessary.

set splitbelow             " Open new windows below the current window.
set splitright             " Open new windows right of the current window.

set cursorline             " Find the current line quickly.
set wrapscan               " Searches wrap around end-of-file.
set report      =0         " Always report changed lines.
set synmaxcol   =200       " Only highlight the first 200 columns.

set list                   " Show non-printable characters.
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif

" The fish shell is not very compatible to other shells and unexpectedly
" breaks things that use 'shell'.
if &shell =~# 'fish$'
  set shell=/bin/bash
endif

" Plug
"
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-speeddating'
Plug 'junegunn/goyo.vim'
Plug 'mattn/calendar-vim'
Plug 'amix/vim-zenroom2'
Plug 'https://github.com/fmoralesc/vim-pad.git'
Plug 'https://github.com/cwoac/nvim.git'
Plug 'godlygeek/tabular'
Plug 'https://github.com/plasticboy/vim-markdown.git'
Plug 'https://github.com/tomtom/tcomment_vim.git'
Plug 'https://github.com/jceb/vim-orgmode'
Plug 'https://github.com/lifepillar/vim-cheat40.git'
Plug 'reedes/vim-pencil'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'https://github.com/tpope/vim-surround.git'
Plug 'https://github.com/tpope/vim-vinegar.git'
Plug 'https://github.com/ctrlpvim/ctrlp.vim.git'

" Add plugins to &runtimepath
call plug#end()


" Put all temporary files under the same directory.
" https://github.com/mhinz/vim-galore#handling-backup-swap-undo-and-viminfo-files
set backup
set backupdir   =$HOME/.vim/files/backup/
set backupext   =-vimbackup
set backupskip  =
set directory   =$HOME/.vim/files/swap/
set updatecount =100
set undofile
set undodir     =$HOME/.vim/files/undo/
set viminfo     ='100,n$HOME/.vim/files/info/viminfo

autocmd BufRead,BufNewFile *.txt set filetype=org

" markdown
" au! BufRead,BufNewFile *.markdown set filetype=mkd
" au! BufRead,BufNewFile *.md       set filetype=mkd
" autocm VimEnter *.mk Goyo

augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
  autocmd FileType text         call pencil#init()
augroup END
let g:vim_markdown_toml_frontmatter = 1
let g:vim_markdown_folding_disabled = 1

" VIM-pad config
"
" defulat dir
let g:pad#dir = "~/Dropbox/Notatki"
" search window height
let g:pad#window_height = 10
" autorename files while save
let g:pad#rename_files = 1
" change grep to ag silver search. Grep is broken on Mac OS X
let g:pad#search_backend = 'ag'
" open file in main window
let g:pad#open_in_split = 0

" Fold and unfold Markdown by space key
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

" Language PL spell check
set spell spelllang=pl

set nospell

set relativenumber
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

call tcomment#DefineType('markdown', '> %s')

set clipboard+=unnamed
set mouse+=a

" Highlight dynamically as pattern is typed
set incsearch

" Optimize for fast terminal connections
set ttyfast
" " Add the g flag to search/replace by default
set gdefault

 let g:org_indent = 1

" do not use default cheat sheet 
 let g:cheat40_use_default = 0

" mark two or more spaces after some text as an error
syntax match DoubleSpace /\S\zs {2,}/
highlight link DoubleSpace Error


" Create a Markdown-link structure for the current word or visual selection with
" leader 3. Paste in the URL later. Or use leader 4 to insert the current
" system clipboard as an URL.
nnoremap <Leader>3 ciw[<C-r>"]()<Esc>
vnoremap <Leader>3 c[<C-r>"]()<Esc>
nnoremap <Leader>4 ciw[<C-r>"](<Esc>"*pli)<Esc>
vnoremap <Leader>4 c[<C-r>"](<Esc>"*pli)<Esc>
